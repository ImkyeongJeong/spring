<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.company.app.emp.mapper.EmpMapper">
	<!-- id는 interface의 메서드명과 동일하게 한다. -->
	<!-- 엘리어스 지정해주면 get해서 호출할 때 편리 -->
	<select id="getEmp" resultType="EmpVO">
		SELECT *
		FROM employees
		WHERE EMPLOYEE_ID=#{employeeId}
	</select>
	<select id="getEmpList" parameterType="EmpReqVO" resultType="EmpVO">
		SELECT *
		FROM employees
		<where>
			<if test="employeeId != null and employeeId != ''">
				employee_id = #{employeeId}
			</if>
<!--  		 	<if test="depts != null and depst != ''">
				<foreach collection="depts" item="dept">
					and department_id#{dept}
				</foreach>
			</if> -->
			<if test="jobId != null and jobId != ''">
				and job_id = #{jobId}
			</if>
			<if test="sdt != null">
				and hire_date >= #{sdt}
			</if>
			<if test="edt != null">
				and hire_date <![CDATA[<= #{edt}]]>
			</if>
		</where>
		ORDER BY employee_id
	</select>
	<insert id="insert" parameterType="EmpVO">
		<selectKey keyProperty="employeeId" order="BEFORE" resultType="string">
			SELECT NVL(max(employee_id),0)+1 FROM employees
		</selectKey>
		INSERT INTO 
			employees(employee_id,first_name, last_name, email, hire_date, job_id)
		VALUES (#{employeeId},#{firstName},#{lastName},#{email},#{hireDate},#{jobId})
	</insert>
	<update id="update" parameterType="EmpVO">
		UPDATE employees
		SET first_name = #{firstName},
			last_name = #{lastName},
			email = #{email},
			hire_date = #{hireDate},
			job_id = #{jobId}
		WHERE employee_id = #{employeeId}
	</update>
	<delete id="delete" parameterType="EmpVO">
		DELETE FROM employees
		WHERE employee_id = #{employeeId}
	</delete>
	
	<!-- column:테이블의 컬럼명, property:VO 1:1방식 -->
   <resultMap type="EmpVO" id="empDeptMap">
		<id column="employee_id" property="employeeId"/>
		<result column="first_name" property="firstName"/>
		<result column="last_name" property="lastName"/>
		<association property="dept" javaType="Departments">
			<id column="department_id" property="departmentId" />
			<result column="department_name" property="departmentName"/>
			<result column="manager_id" property="managerId"/>
			<result column="location_id" property="locationId"/>
		</association>
	</resultMap>
	
	
	<select id="getEmpDept" resultType="EmpVO">
		SELECT E.EMPLOYEE_ID,
			   E.FIRST_NAME,
			   D.DEPARTMENT_NAME "dept.departmentName",
			   D.MANAGER_ID "dept.managerId", 
			   D.LOCATION_ID "dept.locationId"
		 FROM EMPLOYEES E, DEPARTMENTS D
		WHERE E.DEPARTMENT_ID = D.DEPARTMENT_ID
	</select>
	
	
	<!-- 1:다 방식 type: 담길 객체, id:resultMap 이름-->
	<resultMap type="Departments" id="deptEmpsMap">
		<id column="department_id" property="departmentId"/>
		<result column="department_name" property="departmentName"/>
		<result column="manager_id" property="managerId"/>
		<result column="location_id" property="locationId"/>
		<collection property="emp" ofType="EmpVO">
			<id column="EMPLOYEE_ID" property="employeeId"/>
			<result column="FIRST_NAME" property="firstName"/>
		</collection>
	</resultMap>
	
	<select id="getDeptEmps" resultMap="deptEmpsMap">
		SELECT E.EMPLOYEE_ID,
			   E.FIRST_NAME,
			   D.DEPARTMENT_ID,
			   D.DEPARTMENT_NAME, 
			   D.MANAGER_ID,
			   D.LOCATION_ID
		 FROM EMPLOYEES E, DEPARTMENTS D
		WHERE E.DEPARTMENT_ID = D.DEPARTMENT_ID
	</select>
	
	
</mapper> 